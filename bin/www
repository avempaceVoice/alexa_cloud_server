#!/usr/bin/env node

/**
 * 
 * Copyright (c) 2017, Avempace Wireless (Daghfous Wejd). All rights reserved.
 * 
 */
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('MobileAcces:server');
var http = require('http');
var models = require('../models')
var sockService = require('../services/socketservice')

var shortid = require('shortid');

var serverUrl = 'https://voiceconnect.ovh/ask'

models.sequelize.sync({ force: true }).then(function() { // in case we need to reload database config
    //models.sequelize.sync().then(function () {

});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5151');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



var reqhttp = require('request')
var NetKeepAlive = require('net-keepalive')

var clients = []
var lastSelectedClient = []
    /**
     * this is the socket server listening on port 7070
     */
require('net').createServer(function(socket) {


    socket.setKeepAlive(true, 10000)
    NetKeepAlive.setKeepAliveInterval(socket, 4000)
    NetKeepAlive.setKeepAliveProbes(socket, 1)


    socket.on('data', function(data) {






        if (lastSelectedClient.indexOf(data.toString()) < 0) {
            socket.linked = false
            socket.id = shortid.generate()

            reqhttp.post(serverUrl + '/updateSpeakerByNumSerie', { form: { linked: false, num_serie: data.toString() } }, function(result) {

            })


            sock = {
                'selected': false,
                'num_serie': data.toString(),
                'socket': socket.id
            }

            sockService.addsocket(sock, function(scocketAdded) {
                if (scocketAdded == false) {
                    return socket.destroy()
                }

                socket.name = data.toString();
                clients.push(socket);
                socket.write('connected to server')
            })


        } else {
            lastSelectedClient.forEach(function(element) {
                if (data.toString() == element) {
                    socket.linked = true
                    socket.id = shortid.generate()

                    reqhttp.post(serverUrl + '/updateSpeakerByNumSerie', { form: { linked: true, num_serie: data.toString() } }, function(result) {


                    })


                    sock = {
                        'selected': true,
                        'num_serie': data.toString(),
                        'socket': socket.id
                    }

                    sockService.addsocket(sock, function(scocketAdded) {
                        if (scocketAdded == false) {
                            return socket.destroy()
                        }


                        socket.name = data.toString();
                        clients.push(socket);
                        socket.write('connected to server')
                    })


                }
            })
        }






    });

    socket.on('error', function(e) {
        if (e.code == 'ETIMEDOUT') {
            var index = clients.indexOf(socket);
            if (index != -1) {
                clients.splice(index, 1);

                sockService.deletesocketByNumSerie(socket.name, function(deleted) {

                })
                reqhttp.post(serverUrl + '/updateSpeakerByNumSerie', { form: { linked: false, num_serie: socket.name } }, function(result) {

                })
            }

        }
    })

    socket.on('close', function() {
        var index = clients.indexOf(socket);
        if (index != -1) {
            clients.splice(index, 1);
            sockService.deletesocketByNumSerie(socket.name, function(deleted) {

            })
            reqhttp.post(serverUrl + '/updateSpeakerByNumSerie', { form: { linked: false, num_serie: socket.name } }, function(result) {

            })

        }
    });

    var sendSocketToSpeaker = function(name, action, callback) {



        i = 0
        j = 0
        clients.forEach(function(client) {
            i++
            if (client.name == name) {
                j++

                callback(client.write(action))
            }


            if (i == clients.length) {
                if (j == 0) {

                    callback(false)
                }
            }



        })




    }


    exports.sendSocketToSpeaker = sendSocketToSpeaker;


}).listen(7070, function() {


});




exports.clients = clients;
exports.lastSelectedClient = lastSelectedClient;

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();

    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}